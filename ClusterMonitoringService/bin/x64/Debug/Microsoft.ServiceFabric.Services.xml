<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.ServiceFabric.Services</name>
    </assembly>
    <members>
        <member name="T:Microsoft.ServiceFabric.Services.CRC64">
            <summary>
            Computes CRC64 for a given byte payload.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.CRC64.Crc64Table">
            <summary>
            CRC table.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.CRC64.ToCRC64(System.Byte[])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.CRC64.ToCRC64(System.Byte[][])">
            <summary>
            Returns the CRC64 for the given payload.
            </summary>
            <param name="values">Byte payloads.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.CRC64.ToCrc64String(System.Byte[])">
            <summary>
            Returns the CRC64 in string form for the given payload.
            </summary>
            <param name="value">Byte payload.</param>
            <returns>CRC64 value.</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCache`1">
            <summary>
            This is the cache used by CommunicationClientFactory base class to store the communication channel's
            for the replicas or instances of a partition. 
            This is a 2 level cache of Partition Id->Endpoint Address->Client channel. The client channels are
            maintained as a weak reference and the cache entries whose weak references are not alive are cleaned
            up periodically.
            </summary>
            <typeparam name="TCommunicationClient"></typeparam>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1">
            <summary>
            This represents the cache entry that stores the communication channel to an endpoint of a replica or instance.
            </summary>
            <typeparam name="TCommunicationClient"></typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1.Semaphore">
            <summary>
            This lock protects the members of the cache entry. Users of the this object
            should acquire this lock before accessing the properties of the object.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientCacheEntry`1.IsInCache">
            <summary>
            The IsInCache and IsCommunicationClientValid properties are used to synchronize the code using
            the cache client entry and the cache clean up code - to ensure that a valid client isn't cleaned up
            and also a client entry that is removed from cache is not used by the communication factory.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector">
            <summary>
            This enumeration specifies how the target replica or instance should be chosen
            when creating a communication channel for a particular partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.Default">
            <summary>
            This specifies the default option for this enum.
            If the service partition is stateful, this indicates that communication channel
            should be established to the primary replica.
            If the service partition is stateless, this indicates that the communication channel
            should be established to a random stateless instance.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.RandomInstance">
            <summary>
            This specifies the default value of this enum for stateless service partitions. This indicates
            that the communication channel should be established to a random stateless instance.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.PrimaryReplica">
            <summary>
            This specifies the default value of this enum for stateful service partitions. This indicates
            that the communication channel should be established to the primary replica.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.RandomReplica">
            <summary>
            For stateful service partitions, this indicates that communication channel can be
            established for to any replica chosen in random - (i.e) primary or secondary.
            This is not valid for stateless service partitions
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector.RandomSecondaryReplica">
            <summary>
            For stateful service partitions, this indicates that communication channel can be
            established for to any secondary replica chosen in random.
            This is not valid for stateless service partitions
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation">
            <summary>
            Specifies the class that encapsulates the exception seen on the communication channel and additional information required to handle that exception.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation.#ctor(System.Exception)">
            <summary>
            Instantiates the exception information using the given exception and the default target replica selector.
            </summary>
            <param name="exception">The exception that was received</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation.#ctor(System.Exception,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector)">
            <summary>
            Instantiates the exception information using the given exception and target replica selector.
            </summary>
            <param name="exception">The exception that was received</param>
            <param name="targetReplica">The target replica information</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation.Exception">
            <summary>
            Exception that was seen on the communication channel
            </summary>
            <value>The <see cref="T:System.Exception"/> that was seen.</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation.TargetReplica">
            <summary>
            The target replica identifier to which the communication channel was established.
            </summary>
            <value>A <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector"/> that specifies gives information about the target replica</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings">
            <summary>
            Specifies the policy for retrying requests on exceptions in the communication channel between
            client and service replicas.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.#ctor">
            <summary>
            Instantiates OperationRetrySettings with default values for the retry settings.
            The default values for MaxRetryBackoffIntervalOnTransientErrors, NonTransientErrors
            are 2 seconds. The default value for MaxRetryCount is 10.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.#ctor(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Instantiates OperationRetrySettings with the supplied settings.
            </summary>
            <param name="maxRetryBackoffIntervalOnTransientErrors">
            Specifies the maximum interval to back-off before retrying incase of Transient errors
            </param>
            <param name="maxRetryBackoffIntervalOnNonTransientErrors">
            Specifies the maximum interval to back-off before retrying incase of Non transient errors
            </param>
            <param name="defaultMaxRetryCount">
            Specifies the maximum number of times to retry.
            </param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnTransientErrors">
            <summary>
            Specifies the maximum interval to back-off before retrying in-case of Transient errors
            </summary>
            <value>Maximum retry interval to back-off on transient errors</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.MaxRetryBackoffIntervalOnNonTransientErrors">
            <summary>
            Specifies the maximum interval to back-off before retrying in-case of Non transient errors
            </summary>
            <value>Maximum retry interval to back-off on non transient errors</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings.DefaultMaxRetryCount">
            <summary>
            Specifies the maximum number of times to retry.
            </summary>
            <value>Maximum number of times to retry a specific exception.</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1">
            <summary>
            Specifies the arguments for the communication client connected/disconnected events handler.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1.Client">
            <summary>
            Communication client for which the event is fired.
            </summary>
            <value>Communication client</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1">
            <summary>
            Provides the base implementation of ICommunicationClientFactory for creating communication clients to talk to service fabric services. Extend the
            CommunicationClientFactoryBase class to create communication clients for custom transport implementations. This class maintains a cache of communication
            clients and attempts to reuse the clients for requests to the same service endpoint.
            </summary>
            <typeparam name="TCommunicationClient">The type of communication client</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ServiceResolver">
            <summary>
            Gets the ServicePartitionResolver used by the client factory for resolving the service endpoint.
            </summary>
            <value>ServicePartitionResolver</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ExceptionHandlers">
            <summary>
            Gets the custom exception handlers for handling exceptions on the client to service communication channel.
            </summary>
            <value>List of Exception handlers</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.TraceId">
            <summary>
            Gets the diagnostics trace identifier for this component.
            </summary>
            <value>Trace identifier</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.#ctor(Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver,System.Collections.Generic.IEnumerable{Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler},System.String)">
            <summary>
            Initializes a new instance of the communication client factory.
            </summary>
            <param name="servicePartitionResolver">Optional ServicePartitionResolver</param>
            <param name="exceptionHandlers">Optional Custom exception handlers for the exceptions on the Client to Service communication channel</param>
            <param name="traceId">Identifier to use in diagnostics traces from this component </param>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Gets or Creates the CommunicationClient for the specified listener name by resolving based on the given previousRsp.
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="targetReplica">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about the exception that occurred when communicating with the service.</param>
            <param name="retrySettings">Specifies the retry policy that should be used for handling the reported exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl" /> object that determines
            how the retry policy for this exception.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(`0)">
            <summary>
            Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer
            connected to the service.
            </summary>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.ValidateClient(System.String,`0)">
            <summary>
            Returns true if the client is still valid and connected to the endpoint specified in the parameter.
            </summary>
            <param name="endpoint">Specifies the expected endpoint to which we think the client is connected to</param>
            <param name="client">the communication client</param>
            <returns>true if the client is valid, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.CreateClientAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a communication client for the given endpoint address.
            </summary>
            <param name="endpoint">listener address where the replica is listening</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The communication client that was created</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientFactoryBase`1.AbortClient(`0)">
            <summary>
            Aborts the given client
            </summary>
            <param name="client">Communication client</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult">
            <summary>
            Specifies the base class for the result from handling an exception 
            during client to service communication.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult">
            <summary>
            Specifies the exception handling result when the request from client to service can be retried
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.IsTransient">
            <summary>
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </summary>
            <value>
            true indicates that this is a transient retriable exception.
            false indicates that this is a non transient retriable exception.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>
            Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.MaxRetryCount">
            <summary>
            Maximum number of times this exception type needs to be retried before giving up.
            The default value is int.MaxValue
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.RetryDelay">
            <summary>
            The operation should be retried after this delay.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.#ctor(System.Exception,System.Boolean,System.TimeSpan,System.Int32)">
            <summary>
            Instantiates the ExceptionHandlingRetryResult using the given arguments.
            </summary>
            <param name="exception">The exception that needs to be retried.</param>
            <param name="isTransient">
            Indicates if this is a transient retriable exception.
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </param>
            <param name="retryDelay">The interval to wait before retrying</param>
            <param name="maxRetryCount">The maximum number of times the exception given in the exception parameter needs to be retried for.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.#ctor(System.String,System.Boolean,System.TimeSpan,System.Int32)">
            <summary>
            Instantiates the ExceptionHandlingRetryResult using the given arguments.
            </summary>
            <param name="exceptionId">An identifier for the exception that needs to be retried.</param>
            <param name="isTransient">
            Indicates if this is a transient retriable exception.
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </param>
            <param name="retryDelay">The interval to wait before retrying</param>
            <param name="maxRetryCount">The maximum number of times the exception identified by the exceptionId parameter needs to be retried for.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingRetryResult.#ctor(System.Exception,System.Boolean,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Int32)">
            <summary>
            Instantiates the ExceptionHandlingRetryResult using the given arguments.
            </summary>
            <param name="exception">The exception that needs to be retried.</param>
            <param name="isTransient">
            Indicates if this is a transient retriable exception.
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </param>
            <param name="retrySettings">The retrySettings from which the interval to wait before retrying is figured out.</param>
            <param name="maxRetryCount">The maximum number of times the exception identified by the exceptionId parameter needs to be retried for.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult">
            <summary>
            Specifies the exception handling result when the request from client to service cannot be retried
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingThrowResult.ExceptionToThrow">
            <summary>
            The exception that should be thrown to the client.
            </summary>
            <value>Exception to throw</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient">
            <summary>
            Defines the interface that represents the communication client for reliable services.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ResolvedServicePartition">
            <summary>
            Gets or Sets the Resolved service partition which was used when this client was created.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServicePartition" /> object</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.ListenerName">
            <summary>
            Gets or Sets the name of the listener in the replica or instance to which the client is
            connected to.
            </summary>
            <value>Name of the listener</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient.Endpoint">
            <summary>
            Gets or Sets the service endpoint to which the client is connected to.
            </summary>
            <value><see cref="T:System.Fabric.ResolvedServiceEndpoint" /></value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1">
            <summary>
            Defines the interface that must be implemented to provide a factory for communication clients to talk to a service fabric service.
            </summary>
            <typeparam name="TCommunicationClient">Type of communication client</typeparam>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected">
            <summary>
            Event handler that is fired when the Communication client connects to the service endpoint.
            </summary>
        </member>
        <member name="E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected">
            <summary>
            Event handler that is fired when the Communication client disconnects from the service endpoint.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="serviceUri">Uri of the service to resolve</param>
            <param name="partitionKey">Key that identifies the partition to resolve</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Re-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate 
            to the endpoint corresponding to the given listenerName. 
            
            The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="previousRsp">Previous ResolvedServicePartition value</param>
            <param name="targetReplicaSelector">Specifies which replica in the partition identified by the partition key, the client should connect to</param>
            <param name="listenerName">Specifies which listener in the endpoint of the chosen replica, to which the client should connect to</param>
            <param name="retrySettings">Specifies the retry policy that should be used for exceptions that occur when creating the client.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the CommunicationClient(<see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient" />) object.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)">
            <summary>
            Handles the exceptions that occur in the CommunicationClient when sending a message to the Service
            </summary>
            <param name="client">Communication client</param>
            <param name="exceptionInformation">Information about exception that happened while communicating with the service.</param>
            <param name="retrySettings">Specifies the retry policy that should be used for handling the reported exception.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            a <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl" /> object that provides information on retry policy for this exception.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler">
            <summary>
            Defines the interface for handling the exceptions encountered in communicating with service fabric services. 
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IExceptionHandler.TryHandleException(Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionHandlingResult@)">
            <summary>
            Method that examines the exception and determines how that exception can be handled. 
            </summary>
            <param name="exceptionInformation">Information about the exception</param>
            <param name="retrySettings">The operation retry preferences.</param>
            <param name="result">Result of the exception handling</param>
            <returns>true if the exception is handled, false otherwise</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1">
            <summary>
            Defines the interface for the client that can communicate with replicas of a particular service partition.
            </summary>
            <typeparam name="TCommunicationClient">Type of ICommunicationClient</typeparam>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the key of the partition the client is communicating with. 
            </summary>
            <value>Partition key</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.TargetReplicaSelector">
            <summary>
            Gets the information about which replica in the partition the client should connect to.
            </summary>
            <value>A <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector"/></value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.ListenerName">
            <summary>
            Gets the name of the listener in the replica to which the client should connect to.
            </summary>
            <value>Listener name</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.IServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl">
            <summary>
            Specifies the retry policy for the exceptions got on the communication from client to service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ShouldRetry">
            <summary>
            Indicates whether the operation should be retried or not.
            </summary>
            <value>true if the operation should be retried, false if the exception should be thrown to the user</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.IsTransient">
            <summary>
            If the ShouldRetry property is true, this property indicates if the communication channel between
            the client and service is still valid.
            Transient retriable exceptions are those where the communication channel from client
            to service still exists.
            Non transient retriable exceptions are those where we need to re-resolve the service endpoint
            before we retry.
            </summary>
            <value>
            true indicates that this is a transient retriable exception.
            false indicates that this is a non transient retriable exception.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.RetryDelay">
            <summary>
            The operation should be retried after this delay if the ShouldRetry is true.
            </summary>
            <value>Time delay after which the operation should be retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.ExceptionId">
            <summary>
            String that uniquely identifies the exception type.
            </summary>
            <value>Unique id for this exception. 
            This id is used to keep track of the number of times this exception is retried</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.MaxRetryCount">
            <summary>
            Max number of times this operation should be retried if the ShouldRetry is true
            </summary>
            <value>Max retry count</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl.Exception">
            <summary>
            Exception to report for the operation, if ShouldRetry is false. 
            By default this is the same exception as the reported exception, however in some cases the Factory may choose to trasform the reported exception to a more meaningful exception.
            </summary>
            <value>Exception</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1">
            <summary>
            Specifies an instance of the communication client that can communicate with the replicas of a particular partition.
            </summary>
            <typeparam name="TCommunicationClient">type of Communication client</typeparam>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.#ctor(Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory{`0},System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings)">
            <summary>
            Instantiates a service partition client that uses the specified communication client factory to create
            a client to talk to the service endpoint identified by the service uri, partitionkey, replica and listener
            arguments.
            </summary>
            <param name="communicationClientFactory">Communication client factory</param>
            <param name="serviceUri">Name of the service</param>
            <param name="partitionKey">The partition key used to identify the partition within the service.</param>
            <param name="targetReplicaSelector">Target replica information</param>
            <param name="listenerName">Listener in the replica to which the client should connect to</param>
            <param name="retrySettings">Retry policy for exceptions seen during communication</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.Factory">
            <summary>
            Gets the communication client factory
            </summary>
            <value>Communication client factory</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.ServiceUri">
            <summary>
            Gets the name of the service
            </summary>
            <value>Name of the service</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.PartitionKey">
            <summary>
            Gets the partition key.
            </summary>
            <value>Partition key</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.TargetReplicaSelector">
            <summary>
            Gets the information about which replica in the partition the client should connect to.
            </summary>
            <value>A <see cref="T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector"/></value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.ListenerName">
            <summary>
            Gets the name of the listener in the replica to which the client should connect to.
            </summary>
            <value>Listener name</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.TryGetLastResolvedServicePartition(System.Fabric.ResolvedServicePartition@)">
            <summary>
            Gets the resolved service partition that was set on the client.
            </summary>
            <param name="resolvedServicePartition">previous ResolvedServicePartition</param>
            <returns>true if a ResolvedServicePartition was set</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the result from the function given in the argument.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetryAsync(System.Func{`0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="cancellationToken">Cancellation token</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry``1(System.Func{`0,``0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <typeparam name="TResult">Result from the function being invoked</typeparam>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
            <returns>Result from the function given in the argument</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Client.ServicePartitionClient`1.InvokeWithRetry(System.Action{`0},System.Type[])">
            <summary>
            Invokes the given Function, retrying for exceptions thrown other than the exceptions in the doNotRetryExceptionTypes.
            For exceptions that are not in doNotRetryExceptionTypes, CommunicationClientFactory's ReportOperationExceptionAsync() method 
            controls if the exception should be retried or not.
            </summary>
            <param name="func">Function being invoked</param>
            <param name="doNotRetryExceptionTypes">Exceptions for which the service partition client should not retry</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.ServiceException">
            <summary>
            Provides an information about an exception from the service. This exception is thrown when the actual
            exception from the service cannot be serialized for transferring to client.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceException.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.ServiceException" /> class.</para>
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.ServiceException.ActualExceptionType">
            <summary>
            Gets the ActualExceptionType is the type of actual exception thrown.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.ServiceFabric.Services.Communication.ServiceException" /> class with appropriate message.
            </summary>
            <param name="actualExceptionType">the ActualExceptionType of exception thrown</param>
            <param name="message">The error message that explains the reason for this exception
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection">
            <summary>
            This class represents the endpoints of a Reliable service. Each endpoint has a listener name and the address of that listener.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.#ctor">
            <summary>
            Instantiates an empty ServiceEndpointsCollection.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.#ctor(System.String,System.String)">
            <summary>
            Instantiates the ServiceEndpointsCollection with a single endpoint, identified by the listener name.
            </summary>
            <param name="listenerName">Listener name of the endpoint</param>
            <param name="endpointAddress">Address of the endpoint</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.AddEndpoints(Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection)">
            <summary>
            Adds the endpoints in the input EndpointsCollection class to the EndpointsCollection.
            </summary>
            <param name="newEndpoints">input EndpointsCollection</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.AddEndpoint(System.String,System.String)">
            <summary>
            Adds an endpoint to the EndpointsCollection.
            </summary>
            <param name="listenerName">Listener name of the endpoint</param>
            <param name="endpointAddress">Address of the endpoint</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.TryGetFirstEndpointAddress(System.String@)">
            <summary>
            Gets the first endpoint address in the EndpointsCollection.
            </summary>
            <param name="endpointAddress">First endpoint in the EndpointsCollection</param>
            <returns>True if there is at-least one endpoint in the EndpointsCollection, false otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.TryGetEndpointAddress(System.String,System.String@)">
            <summary>
            Gets the endpoint identified by the listener name.
            </summary>
            <param name="listenerName">Listener name</param>
            <param name="endpointAddress">Address of the endpoint if an endpoint with that listener name exists.</param>
            <returns>True if an endpoint with the listener name exists, False otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.TryParseEndpointsString(System.String,Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection@)">
            <summary>
            Constructs an EndpointsCollection from a string version of the endpoints. String form of EndpointsCollection is of the form
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <param name="endpointsString">string form of endpointsCollection</param>
            <param name="serviceEndpoints">ServiceEndpointCollection object if the string can be parsed to a valid ServiceEndpointCollection object</param>
            <returns>True if the string can be parsed to a valid EndpointsCollection, False otherwise</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.ToString">
            <summary>
            Converts the endpointsCollection to a JSON string of the form 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            </summary>
            <returns>String form of the endpointsCollection</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.ServiceEndpointCollection.ToReadOnlyDictionary">
            <summary>
            Returns a ReadOnlyDictionary of the endpointsCollection.
            </summary>
            <returns>EndpointsCollection as a ReadOnlyDictionary</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener">
            <summary>
                Defines the base interface and the state machine contract for the communication listener 
                for a Service Fabric Service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)">
            <summary>
                This method causes the communication listener to be opened. Once the Open
                completes, the communication listener becomes usable - accepts and sends messages.
            </summary>
            <param name="cancellationToken">
                Cancellation token
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result of the Task is
            the endpoint string.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and 
            this method allows the communication listener to transition to this state in a
            graceful manner.
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort">
            <summary>
            This method causes the communication listener to close. Close is a terminal state and
            this method causes the transition to close ungracefully. Any outstanding operations
            (including close) should be canceled when this method is called.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener">
            <summary>
            Represents the communication listener and its properties for a Stateless Service instance.
            Endpoints given out by the communication listener are associated with the name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.DefaultName">
            <summary>
            <para>The default name of the Service instance listener.</para>
            </summary>
            <value>
            <para>The default name of the Service instance listener.</para>
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.Name">
            <summary>
            <para>Gets the name of the communication listener.</para>
            </summary>
            <value>
            <para>The name of the communication listener.</para>
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.CreateCommunicationListener">
            <summary>
            <para>Gets the factory method for creating the communication listener.</para>
            </summary>
            <value>
            <para>The factory method for creating the communication listener.</para>
            </value>
            <remarks>
            <para>The factory method takes in a <see cref="T:System.Fabric.StatelessServiceContext"/> and returns communication listener implementing <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceInstanceListener.#ctor(System.Func{System.Fabric.StatelessServiceContext,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String)">
            <summary>
            Initializes a new instance of ServiceInstanceListener.
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener.</param>
            <param name="name">Name of the communication listener. This parameter is optional if the Stateless Service has only one communication listener. If it is not given, the Name is set to DefaultName.</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener">
            <summary>
            Represents the communication listener and its properties for a Stateful Service replica.
            Endpoints given out by the communication listener are associated with the name of the communication listener.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.DefaultName">
            <summary>
            <para>The default name of the Service replica listener.</para>
            </summary>
            <value>
            <para>The default name of the Service replica listener.</para>
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.Name">
            <summary>
            <para>Gets the name of the communication listener.</para>
            </summary>
            <value>
            <para>The name of the communication listener.</para>
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.ListenOnSecondary">
            <summary>
            <para>Gets the flag that indicates if this communication listener should be opened when the replica becomes an 
            <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/>.</para>
            <para>When this member is false, the communication listener is opened only when the replica becomes 
            <see cref="F:System.Fabric.ReplicaRole.Primary"/>.</para>
            <para>The default value is <languageKeyword>false</languageKeyword>.</para>
            </summary>
            <value>
            <para>The flag that indicates if this communication listener should be opened when the replica is <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary"/>.</para>
            </value>
            <remarks>
            <para>This flag can be set when the primary replica is too busy to serve reads and writes efficiently and the application can tolerate reading stale (but consistent) data,
            then data can be read from secondary replica.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.CreateCommunicationListener">
            <summary>
            <para>Gets the factory method for creating the communication listener.</para>
            </summary>
            <value>
            <para>The factory method for creating the communication listener.</para>
            </value>
            <remarks>
            <para>The factory method takes in a <see cref="T:System.Fabric.StatefulServiceContext"/> and returns communication listener implementing <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener.#ctor(System.Func{System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener},System.String,System.Boolean)">
            <summary>
            Creates the ServiceReplicaListener
            </summary>
            <param name="createCommunicationListener">Factory method for creating the communication listener</param>
            <param name="name">Name of the communication listener. This parameter is optional, if the service has only one communication listener</param>
            <param name="listenOnSecondary">Specifies if the communication listener needs to be opened when the replica becomes Active secondary. THis parameter is optional</param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.ServiceRuntime">
            <summary>
            The static class that provides methods to register reliable services with Service Fabric runtime.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.ServiceRuntime.RegisterServiceAsync(System.String,System.Func{System.Fabric.StatelessServiceContext,Microsoft.ServiceFabric.Services.Runtime.StatelessService},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers a reliable stateless service with Service Fabric runtime.
            </summary>
            <param name="serviceTypeName">The service type name as provied in service manifest.</param>
            <param name="serviceFactory">A factory method to create stateless service objects.</param>
            <param name="timeout">The timeout for the register operation.</param>
            <para>The default timeout for this operation is taken from ServiceFactoryRegistrationTimeout in Hosting section of the cluster manifest. Default value for ServiceFactoryRegistrationTimeout is 120 seconds.</para>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous register operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.ServiceRuntime.RegisterServiceAsync(System.String,System.Func{System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Registers a reliable stateful service with Service Fabric runtime.
            </summary>
            <param name="serviceTypeName">The service type name as provied in service manifest.</param>
            <param name="serviceFactory">A factory method to create stateful service objects.</param>
            <param name="timeout">The timeout for the register operation.</param>
            <para>The default timeout for this operation is taken from ServiceFactoryRegistrationTimeout in Hosting section of the cluster manifest. Default value for ServiceFactoryRegistrationTimeout is 120 seconds.</para>
            <param name="cancellationToken">The token to monitor for cancellation requests.</param>
            <returns>
            A task that represents the asynchronous register operation.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService">
            <summary>
            Represents the base class for Microsoft Service Fabric based stateful reliable service
            which provides an <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> to manage service's state. 
            Derive from this class to implement a Microsoft Service Fabric based stateful reliable service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulService.StateManager">
            <summary>
            Gets this replica's <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>.
            </summary>
            <value>The <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/> of the replica.</value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.#ctor(System.Fabric.StatefulServiceContext)">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulService"/> with default <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManager"/>: <see cref="T:Microsoft.ServiceFabric.Data.ReliableStateManager"/>.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> describes the stateful service context, which it provides information like replica ID, partition ID, and service name.
            </param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulService.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.IReliableStateManagerReplica2)">
            <summary>
            Creates a new stateful service. 
            Override this method to create a new stateful service with non-default state manager replica.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> describes the stateful service context, which it provides information like replica ID, partition ID, and service name.
            </param>
            <param name="reliableStateManagerReplica">
            A <see cref="T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica2"/> represents a reliable state provider replica.
            </param>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase">
            <summary>
            Represents the base class for Microsoft Service Fabric based stateful reliable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.IStateProviderReplica2)">
            <summary>
            Creates a new stateful service.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatefulServiceContext"/> describes the service context, which it provides information like replica ID, partition ID, and service name.
            </param>
            <param name="stateProviderReplica">
            A <see cref="T:Microsoft.ServiceFabric.Data.IStateProviderReplica2"/> represents a reliable state provider replica.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.Context">
            <summary>
            Gets the service context that this stateful service is operating under.
            It provides information like replica ID, partition ID, service name etc.
            </summary>
            <value>
            A <see cref="T:System.Fabric.StatefulServiceContext"/> describes the service context, which it provides information like replica ID, partition ID, and service name.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.GetAddresses">
            <summary>
            Gets the list of all the addresses for this service replica
            as (ListenerName, Endpoint) key-value pair.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> containing list of addresses as
            (ListenerName, Endpoint) key-value pair.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.Partition">
            <summary>
            The service partition to which current service replica belongs. 
            </summary>
            <value>
            An <see cref="T:System.Fabric.IStatefulServicePartition"/> that represents the 
            partition to which this service replica belongs.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.CreateServiceReplicaListeners">
            <summary>
            Override this method to supply the communication listeners for the service replica. The endpoints returned by the communication listener
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            <code>{"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</code>
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <returns>List of <see cref="T:Microsoft.ServiceFabric.Services.Communication.Runtime.ServiceReplicaListener"/> </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Threading.CancellationToken)">
            <summary>
            This method is called when the replica is being opened and it is the final step of opening the service.
            Override this method to be notified that Open has completed for this replica's internal components.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="openMode"><see cref="T:System.Fabric.ReplicaOpenMode"/> for this service replica.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)">
            <summary>
            This method is called when role of the replica is changing and it is the final step before completing <see cref="M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)"/>.
            Override this method to be notified that ChangeRole has completed for this replica's internal components.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="newRole">New <see cref="T:System.Fabric.ReplicaRole"/> for this service replica.</param>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)">
            <summary>
            This method is implemented as a processing loop and will only be called when the replica is primary with write status.
            Override this method with the application logic. 
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
            <remarks>
            Please ensure you follow these guidelines when overriding <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>:
            <list type="bullet">
                <item>
                    <description>
                    Make sure <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> is honored and once 
                    it has been signaled, <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> exits gracefully as soon as possible. Please note that
                    if <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> has finished its intended work, it does not need to wait for 
                    <paramref name="cancellationToken"/> to be signaled and can return gracefully.
                    </description>
                </item>
                <item>
                    <description>
                    Service Fabric runtime does not handle all exception(s) escaping from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>. If an unhandled
                    exception escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>, then Service Fabric runtime takes following action(s):
                    <list type="bullet">
                        <item>
                            <description>
                            If a <see cref="T:System.Fabric.FabricException"/> (or one of its derived exception) escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>, 
                            Service Fabric runtime will restart this service replica. A health warning will be appear in Service Fabric
                            Explorer containing details about unhandled exception.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an <see cref="T:System.OperationCanceledException"/> escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> and Service Fabric runtime
                            has requested cancellation by signaling <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>,
                            Service Fabric runtime handles this exception and considers it as graceful completion of <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an <see cref="T:System.OperationCanceledException"/> escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> and Service Fabric runtime
                            has NOT requested cancellation by signaling <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/>,
                            the process that is hosting this service replica is brought down. This will impact all other service replicas 
                            that are hosted by the same process. The details about unhandled exceptions can be viewed in Windows Event Viewer.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an exception of any other type escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.RunAsync(System.Threading.CancellationToken)"/> then the process that is hosting this
                            service replica is brought down. This will impact all other service replicas that are hosted by the
                            same process. The details about unhandled exceptions can be viewed in Windows Event Viewer.
                            </description>
                        </item>
                    </list>
                    </description>
                </item>
            </list>
            <para>
            Failing to conform to these guidelines can cause fail-over, reconfiguration or upgrade of your service to get stuck
            and can impact availability of your service.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of closing the service gracefully.
            Override this method to be notified that Close has completed for this replica's internal components.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnAbort">
            <summary>
            The notification that the service is being aborted. RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path. 
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnDataLossAsync(Microsoft.ServiceFabric.Data.RestoreContext,System.Threading.CancellationToken)">
            <summary>
            This method is called during suspected data loss. 
            You can override this method to restore the service in case of data loss.
            </summary>
            <param name="restoreCtx">
            A <see cref="T:Microsoft.ServiceFabric.Data.RestoreContext"/> to be used to restore the service.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.
            </param>
            <returns>
            A Task that represents the asynchronous restore operation.
            True indicates that the state has been restored.
            False indicates that the replica's state has not been modified.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnRestoreCompletedAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called when replica's state has been restored successfully via the Backup Restore service
            </summary>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.
            </param>
            <returns>
            A Task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.BackupAsync(Microsoft.ServiceFabric.Data.BackupDescription)">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/>.
            </summary>
            <param name="backupDescription">
            A <see cref="T:Microsoft.ServiceFabric.Data.BackupDescription"/> describing the backup request.
            </param>
            <returns>Task that represents the asynchronous backup operation.</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.BackupAsync(Microsoft.ServiceFabric.Data.BackupDescription,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Performs a backup of all reliable state managed by this <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase"/>.
            </summary>
            <param name="backupDescription">A <see cref="T:Microsoft.ServiceFabric.Data.BackupDescription"/> describing the backup request.</param>
            <param name="timeout">The timeout for this operation.</param>
            <param name="cancellationToken">The cancellation token is used to monitor for cancellation requests.</param>
            <returns>Task that represents the asynchronous backup operation.</returns>
            <remarks>
            Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.
            If false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.
            Also, backup will be marked as unsuccessful.
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceBase.OnDataLossAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called during suspected data-loss.
            </summary>
            <param name="cancellationToken"></param>
            <returns>
            Task that represents the asynchronous operation.
            True indicates that the state has been restored.
            </returns>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.executeRunAsyncTask">
            <summary>
            This task wraps the actual RunAsync task. All the exceptions
            escaping from actual RunAsync are handled inside the task itself.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.Test_CommunicationListeners">
            <summary>
            This is exposed only for testing use.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.ExecuteRunAsync(System.Threading.CancellationToken)">
            <summary>
            We handle all the exceptions coming from actual RunAsync here.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatefulServiceReplicaAdapter.CancelRunAsync">
            <summary>
            This gets called in three cases:
            
            1) When replica is changing role from primary to secondary.
            2) When replica is being closed.
            3) When replica is being aborted.
            
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService">
            <summary>
            Represents the Microsoft Service Fabric based stateless reliable service base class. 
            Derive from this class to implement a Microsoft Service Fabric based stateless reliable service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.#ctor(System.Fabric.StatelessServiceContext)">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceFabric.Services.Runtime.StatelessService"/> instance.
            </summary>
            <param name="serviceContext">
            A <see cref="T:System.Fabric.StatelessServiceContext"/> that describes the service context.
            </param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.GetAddresses">
            <summary>
            Gets the list of all the addresses for this service instance
            as (ListenerName, Endpoint) key-value pair.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> containing list of addresses as
            (ListenerName, Endpoint) key-value pair.
            </returns>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessService.Context">
            <summary>
            Gets the service context that this stateless service is operating under. It provides
            information like InstanceId, PartitionId, ServiceName etc.
            </summary>
            <value>
            A <see cref="T:System.Fabric.StatelessServiceContext"/> that describes the service context.
            </value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Runtime.StatelessService.Partition">
            <summary>
            Service partition to which current service instance belongs. 
            </summary>
            <value>
            An <see cref="T:System.Fabric.IStatelessServicePartition"/> that represents the 
            partition to which this service replica belongs.
            </value>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.CreateServiceInstanceListeners">
            <summary>
            Override this method to supply the communication listeners for the service instance. The endpoints returned by the communication listener's
            are stored as a JSON string of ListenerName, Endpoint string pairs like 
            {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <returns>List of ServiceInstanceListeners</returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnOpenAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of opening the service.
            Override this method to be notified that Open has completed for this instance's internal components.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Services that want to implement a background task, which runs when the service comes up,
            should override this method with their logic.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="cancellationToken">Cancellation token to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
            <remarks>
            Please ensure you follow these guidelines when overriding <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>:
            <list type="bullet">
                <item>
                    <description>
                    Make sure <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> is honored and once 
                    it has been signaled, <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> exits gracefully as soon as possible. Please note that
                    if <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> has finished its intended work, it does not need to wait for 
                    <paramref name="cancellationToken"/> to be signaled and can return gracefully.
                    </description>
                </item>
                <item>
                    <description>
                    Service Fabric runtime does not handle all exception(s) escaping from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>. If an unhandled
                    exception escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>, then Service Fabric runtime takes following action(s):
                    <list type="bullet">
                        <item>
                            <description>
                            If a <see cref="T:System.Fabric.FabricException"/> (or one of its derived exception) escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>, 
                            Service Fabric runtime will drop this service instance and a new instance will be created. A health warning
                            will be appear in Service Fabric Explorer containing details about unhandled exception.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an <see cref="T:System.OperationCanceledException"/> escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> and Service Fabric runtime
                            has requested cancellation by signaling <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>,
                            Service Fabric runtime handles this exception and considers it as graceful completion of <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an <see cref="T:System.OperationCanceledException"/> escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> and Service Fabric runtime
                            has NOT requested cancellation by signaling <paramref name="cancellationToken"/> passed to <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/>,
                            the process that is hosting this service instance is brought down. This will impact all other service instances 
                            that are hosted by the same process. The details about unhandled exceptions can be viewed in Windows Event Viewer.
                            </description>
                        </item>
                        <item>
                            <description>
                            If an exception of any other type escapes from <see cref="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.RunAsync(System.Threading.CancellationToken)"/> then the process that is hosting this
                            service instance is brought down. This will impact all other service instances that are hosted by the
                            same process. The details about unhandled exceptions can be viewed in Windows Event Viewer.
                            </description>
                        </item>
                    </list>
                    </description>
                </item>
            </list>
            <para>
            Failing to conform to these guidelines can cause fail-over, reconfiguration or upgrade of your service to get stuck
            and can impact availability of your service.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnCloseAsync(System.Threading.CancellationToken)">
            <summary>
            This method is called as the final step of closing the service.
            Override this method to be notified that Close has completed for this instance's internal components.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
            <param name="cancellationToken">Cancellation token provided to monitor for cancellation requests.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessService.OnAbort">
            <summary>
            Notification that the service is being aborted.  RunAsync MAY be running concurrently
            with the execution of this method, as cancellation is not awaited on the abort path.
            <para>
            For information about Reliable Services life cycle please see
            https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-lifecycle
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.executeRunAsyncTask">
            <summary>
            This task wraps the actual RunAsync task. All the exceptions
            escaping from actual RunAsync are handled inside the task itself.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.ExecuteRunAsync(System.Threading.CancellationToken)">
            <summary>
            We handle all the exceptions coming from actual RunAsync here.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Runtime.StatelessServiceInstanceAdapter.CancelRunAsync">
            <summary>
            This gets called in two cases:
            
            1) When replica is being closed.
            2) When replica is being aborted.
            
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.ServiceEventSource">
            <summary>
            Reliable Services event source collected by Service Fabric runtime diagnostics system.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.ServiceEventSource.Instance">
            <summary>
            Gets instance of <see cref="T:Microsoft.ServiceFabric.Services.ServiceEventSource"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceEventSource.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.ServiceFabric.Services.ServiceEventSource" /> class from being created.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.ServiceNameFormat">
            <summary>
            This class provides the logic for deriving the names of various items within the manifest from the code. 
            It is used by framework components when names are not specified in the API and the framework types have
            to default it to a meaningful name derived from the service type.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.ServiceNameFormat.GetEndpointName(System.Type)">
            <summary>
            Gets the default endpoint resource name for the given service type
            </summary>
            <param name="serviceInterfaceType">Service interface type name.</param>
            <returns>The name of the endpoint resource.</returns>
            <remarks>
            <list type="bullet">
                <item>
                    If the type name is <code>IMyService</code>, this method returns <code>MyServiceEndpoint</code> as the name of the endpoint resource.
                </item>
                <item>
                    If the type name is <code>Foo</code>, this method returns <code>FooServiceEndpoint</code> as the name of the endpoint resource.
                </item>
            </list>
            </remarks>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver">
            <summary>
            <para>
            Defines the interface for the Service partition resolver.
            Service resolution is the process of looking up the set of endpoints for the replicas in a partition. A service partition resolver
            implements the logic for service resolution.
            </para>
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service with specified back-off/retry settings on retry-able errors.
            </summary>
            <param name="serviceUri">Name of the service instance to resolve.</param>
            <param name="partitionKey">
            <para>
            <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">Key</see> that determines the target partition of the service instance. The <see cref="T:System.Fabric.ServicePartitionKind">partitioning scheme</see>
            specified in the key should match the partitioning scheme used to create the service instance.
            </para>
            </param>
            <param name="resolveTimeoutPerTry">The timeout per resolve try.</param>
            <param name="maxRetryBackoffInterval">
            The interval to back-off before retrying the resolution after a failure due to retry-able exception.
            </param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents the outstanding service resolution operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            <para>
            Re-resolves a previously resolved partition of the specified service with specified back-off/retry settings 
            on retry-able errors. This method overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.
            </para>
            </summary>
            <param name="previousRsp">The resolved service partition that the client got from the earlier invocation of the ResolveAsync() method.</param>
            <param name="resolveTimeoutPerTry">The timeout per resolve try.</param>
            <param name="maxRetryBackoffInterval">
            The interval to back-off before retrying the resolution after a failure due to retry-able exception.
            </param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding service resolution operation. The result from
            the Task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">
            <summary>
            Defines a key to address a service partition.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.Singleton">
            <summary>
            Returns a ServicePartitionKey that indicates a singleton partition.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor">
            <summary>
            Instantiates a ServicePartitionKey for singleton partitioned service.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor(System.Int64)">
            <summary>
            Instantiates a ServicePartitionKey for uniform int64 partitioned service.
            </summary>
            <param name="partitionKey">Value of the int64 partition key</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.#ctor(System.String)">
            <summary>
            Instantiates a ServicePartitionKey for named partitioned services.
            </summary>
            <param name="partitionKey">Value of the named partition key</param>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.Kind">
            <summary>
            Gets the Kind of the partition key applies to.
            </summary>
            <value>Partition kind</value>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey.Value">
            <summary>
            Gets the value of the partition key. This value can be casted to the right type based on the value of the Kind property.
            </summary>
            <value>Partition key</value>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate">
            <summary>
            Represents a delegate to create a FabricClient object.
            </summary>
            <returns>FabricClient</returns>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver">
            <summary>
            <para>
            Implements the Service partition resolver class that uses the <see cref="T:System.Fabric.FabricClient">FabricClient's </see> <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" /> method for service resolution
            and implements a back-off/retry mechanism on errors from that method.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout">
            <summary>
            The default resolve timeout per try used by the ResolveAsync method of <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver"/> when it is
            invoked without explicitly specifying the resolveTimeoutPerTry argument. The default value is 30 seconds.
            </summary>
        </member>
        <member name="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval">
            <summary>
            The default maximum back-off time used by ServicePartitionResolver's ResolveAsync method before retrying, when it is
            invoked without explicitly specifying the maxRetryBackoffInterval argument. The default value is 5 seconds.
            </summary>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            <para>
            Instantiates a ServicePartionResolver, invoking the first delegate to get the <see cref="T:System.Fabric.FabricClient">FabricClient.</see>.
            During partition resolution if FabricClient object gets disposed and second delegate is provided,
            it uses the second delegate to get the FabricClient again. The second delegate provides a way to specify
            an alternate way to get or create FabricClient if FabricClient created with first delegate get disposed.
            </para>
            </summary>
            <param name="createFabricClient">Delegate to create the fabric client.</param>
            <param name="recreateFabricClient">Delegate to re-create the fabric client.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)">
            <summary>
            Instantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.
            </summary>
            <param name="createFabricClient">Delegate to create fabric client.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of the FabricClient.
            </summary>
            <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given FabricClient Settings and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="settings">Fabric client Settings.</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials and the connectionEndpoints to create
            a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client.</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])">
            <summary>
            Instantiates a ServicePartitionResolver, uses the given security credentials, FabricClient Settings and the connectionEndpoints
            to create a new instance of FabricClient.
            </summary>
            <param name="credential">Security credentials for the fabric client.</param>
            <param name="settings">Fabric client Settings.</param>
            <param name="connectionEndpoints">Array of management endpoints of the cluster.</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)">
            <summary>
            <para>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method. This uses the default settings for
            <see cref="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout">timeout</see> and <see cref="F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval">back-off retry</see> intervals.
            </para>
            </summary>
            <param name="serviceUri">Name of the service instance to resolve.</param>
            <param name="partitionKey">
            <para>
            <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">Key</see> that determines the target partition of the service instance. The <see cref="T:System.Fabric.ServicePartitionKind">partitioning scheme</see>
            specified in the key should match the partitioning scheme used to create the service instance.
            </para>
            </param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
            <exception cref="T:System.Fabric.FabricServiceNotFoundException"> 
            <para>
            This method can throw a FabricServiceNotFoundExcepion if there is no service instance in the cluster matching the specified serviceUri.
            </para>
            </exception>
            <exception cref="T:System.Fabric.FabricException"> 
            <para>
            This method can throw a FabricException if the scheme specified in the ServicePartitionKey doesn't match the scheme used to create the service instance.
            See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/">Errors and Exceptions</see> for handling common FabricClient failures.
            </para>
            </exception>
            <remarks>
            <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" /> method with the given timeout and back-off/retry on retry-able errors.
            </summary>
            <param name="serviceUri">Name of the service instance to resolve.</param>
            <param name="partitionKey">
            <para>
            <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey">Key</see> that determines the target partition of the service instance. The <see cref="T:System.Fabric.ServicePartitionKind">partitioning scheme</see>
            specified in the key should match the partitioning scheme used to create the service instance.
            </para>
            </param>
            <param name="resolveTimeoutPerTry">The timeout passed to FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method.</param>
            <param name="maxRetryBackoffInterval">
            <para>
            The max interval to back-off before retrying when FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method fails with a retry-able exception. 
            The actual back off interval is a random time interval which is less than or equal to the specified maxRetryBackoffInterval.
            </para>
            </param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
            <exception cref="T:System.Fabric.FabricServiceNotFoundException"> 
            <para>
            This method can throw a FabricServiceNotFoundExcepion if there is no service instance in the cluster matching the specified serviceUri.
            </para>
            </exception>
            <exception cref="T:System.Fabric.FabricException"> 
            <para>
            This can throw a FabricException if the scheme specified in the ServicePartitionKey doesn't match the scheme used to create the service instance.
            See also <see href="https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/">Errors and Exceptions</see> for more information.
            </para>
            </exception>
            <remarks>
            <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method with back-off/retry on retry-able errors. This takes in 
            the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. 
            This method overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.
            </summary>
            <param name="previousRsp">The resolved service partition that the client got from the earlier invocation of the ResolveAsync() method.</param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
            <exception cref="T:System.Fabric.FabricServiceNotFoundException"> 
            <para>
            This method can throw a FabricServiceNotFoundExcepion if the service which was resolved previously is no longer present in the cluster.
            </para>
            </exception>
            <remarks>
            <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Resolves a partition of the specified service by invoking FabricClient's
            <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method with back-off/retry on retry-able errors. This takes in 
            the resolved service partition that was got via an earlier invocation of the ResolveAsync() method. 
            This method overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.
            </summary>
            <param name="previousRsp">The resolved service partition that the client got from the earlier invocation of the ResolveAsync() method.</param>
            <param name="resolveTimeoutPerTry">The timeout passed to FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method </param>
            <param name="maxRetryBackoffInterval">
            <para>
            The max interval to back-off before retrying when FabricClient's <see cref="M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" />method fails with a retry-able exception. 
            The actual back off interval is a random time interval which is less than or equal to the specified maxRetryBackoffInterval.
            </para>
            </param>
            <param name="cancellationToken">
            <para>
            The CancellationToken that this operation is observing. It is used to notify the operation that it should be canceled.
            </para>
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task">Task</see> that represents outstanding operation. The result from
            the task is the <see cref="T:System.Fabric.ResolvedServicePartition" /> object, that contains the information
            about the resolved service partition including the service endpoints.
            </returns>
            <exception cref="T:System.Fabric.FabricServiceNotFoundException"> 
            <para>
            This method can throw a FabricServiceNotFoundExcepion if the service which was resolved previously is no longer present in the cluster.
            </para>
            </exception>
            <remarks>
            <para>
            This method retries on all transient exceptions. For cases where you want to limit the max execution time of this method, you should create a <see href="https://docs.microsoft.com/en-us/dotnet/core/api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource__ctor_System_TimeSpan_">cancellation token associated with that max execution time</see>
            and pass that cancellation token to this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)">
            <summary>
            Updates the default ServicePartitionResolver.
            </summary>
            <param name="defaultServiceResolver">The new default value</param>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault">
            <summary>
            Gets the default ServicePartitionResolver.
            <remarks>
            <para>
            The default service partition resolver instance uses the local <see href="https://docs.microsoft.com/en-us/dotnet/api/system.fabric.fabricclient#System_Fabric_FabricClient__ctor">fabric client</see>.
            If you are using the ServicePartitionResolver to resolve services that are running on a remote cluster, the recommended practice is to create a ServicePartitionResolver using the appropriate endpoints or FabricClient and then update
            the default ServicePartitionResolver.
            </para>
            </remarks>
            </summary>
            <returns>Default <see cref="T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver"/></returns>
        </member>
        <member name="M:Microsoft.ServiceFabric.Services.Common.IdUtil.HashCombine(System.Int32,System.Int32)">
            <summary>
            This is how VB Anonymous Types combine hash values for fields.
            </summary>
        </member>
        <member name="T:Microsoft.ServiceFabric.Services.SR">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.Error_ConnectionDenied">
            <summary>
              Looks up a localized string similar to Client is Not authorized to connect.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorEndpointNotFound">
            <summary>
              Looks up a localized string similar to No endpoint found for the service &apos;{0}&apos; partition &apos;{1}&apos; that matches the specified TargetReplicaSelector : &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorInvalidStateful">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; of targetReplicaSelector argument is not a valid for a stateful service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorCommunicationTargetSelectorInvalidStateless">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; of targetReplicaSelector argument is not valid for a stateless service.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorConfigFileNotFound">
            <summary>
              Looks up a localized string similar to Config File was Not Found in this path {0}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorConfigPackageNotFound">
            <summary>
              Looks up a localized string similar to ConfigPackageName {0} was not found..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorInvalidAddress">
            <summary>
              Looks up a localized string similar to Client is trying to connect to invalid address {0}..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorInvalidPartitionEndpointAddress">
            <summary>
              Looks up a localized string similar to The EndpointAddress &apos;{0}&apos; for partition &apos;{1}&apos; is not in a format understood by the client.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorListenerAlreadyExists">
            <summary>
              Looks up a localized string similar to Listener with Name &apos;{0}&apos; already exists. When multiple communication listeners are used, a unique name should be specified for each listener..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorListenerNameNotSpecified">
            <summary>
              Looks up a localized string similar to Unique Name must be specified for each listener when multiple communication listeners are used.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorPartitionNamedEndpointNotFound">
            <summary>
              Looks up a localized string similar to NamedEndpoint &apos;{0}&apos; not found in the address &apos;{1}&apos; for partition &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorParttionInstanceInvalidAddress">
            <summary>
              Looks up a localized string similar to The primary or stateless instance for the partition &apos;{0}&apos; has invalid address, this means that right address from the replica/instance is not registered in the system..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorSectionNameNotFound">
            <summary>
              Looks up a localized string similar to SectionName {0} was Not Found in the Settings File.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceDoesNotExist">
            <summary>
              Looks up a localized string similar to Service &apos;{0}&apos; doesnot exist.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceMethodDispatcher_InterfaceNotFound">
            <summary>
              Looks up a localized string similar to Interface id {0} is not implemented by object {1}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.ErrorServiceTooBusy">
            <summary>
              Looks up a localized string similar to This can happen if message is dropped when service is busy or its long running operation and taking more time than configured Operation Timeout..
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateful service replica.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatefulRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateful service replica.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Replica Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCancellation">
            <summary>
              Looks up a localized string similar to RunAsync has been cancelled for a stateless service instance.  The cancellation will be considered &apos;slow&apos; if RunAsync does not halt execution within {6} milliseconds.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncCompletion">
            <summary>
              Looks up a localized string similar to RunAsync has successfully completed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncFailure">
            <summary>
              Looks up a localized string similar to RunAsync has failed for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, WasCancelled: {6}, Exception: {7}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncInvocation">
            <summary>
              Looks up a localized string similar to RunAsync has been invoked for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}.
            </summary>
        </member>
        <member name="P:Microsoft.ServiceFabric.Services.SR.event_StatelessRunAsyncSlowCancellation">
            <summary>
              Looks up a localized string similar to RunAsync was slow to respect the cancellation token and halt execution for a stateless service instance.  Application Type Name: {0}, Application Name: {1}, Service Type Name: {2}, Service Name: {3}, Partition Id: {4}, Instance Id: {5}, Time to Cancel: {6} milliseconds, Slow Cancellation Timeout: {7} milliseconds.
            </summary>
        </member>
    </members>
</doc>
